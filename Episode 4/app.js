//THIS CODE WILL DEPLOY A CONTRACT AFTER IT IS COMPILED IN REMIX IDE

//EDIT: new way to specify transaction on ethereumjs-tx
const Tx = require('ethereumjs-tx').Transaction
const Web3 = require('web3')
const web3 = new Web3('https://rinkeby.infura.io/v3/8b31aa8a9e104bb99f1464915c82ab67')

//created new accounts via web3.eth.accounts.create() in node
const account2 = '0x279D7F2b2CDB8381561eCF598FDD724998708cd3'
//...and put private keys here. not real accounts.
const privKey2 = Buffer.from('9cbba535bed7f18cf7ee446ac1b89b2cce27e12fe7feb3149bd2af2cd885ab19', 'hex')

//get the balance and print to console
web3.eth.getBalance(account2, (err, bal) => {
    console.log('account 2 balance:', web3.utils.fromWei(bal, 'ether'))
})

    
web3.eth.getTransactionCount(account2, (err, txCount)=> {
    //smart contract data
    const data = '0x60806040526040805190810160405280601181526020017f497a68616e20527570656520546f6b656e0000000000000000000000000000008152506000908051906020019061004f92919061014d565b506040805190810160405280600581526020017f5a484e52500000000000000000000000000000000000000000000000000000008152506001908051906020019061009b92919061014d565b506040805190810160405280601081526020017f497a68616e20546f6b656e2076312e3000000000000000000000000000000000815250600290805190602001906100e792919061014d565b503480156100f457600080fd5b506509184e72a000600381905550600354600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506101f2565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061018e57805160ff19168380011785556101bc565b828001600101855582156101bc579182015b828111156101bb5782518255916020019190600101906101a0565b5b5090506101c991906101cd565b5090565b6101ef91905b808211156101eb5760008160009055506001016101d3565b5090565b90565b610b99806102016000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461009e578063095ea7b31461012e57806318160ddd1461019357806323b872dd146101be5780635a3b7e421461024357806370a08231146102d357806395d89b411461032a578063a9059cbb146103ba578063dd62ed3e1461041f575b600080fd5b3480156100aa57600080fd5b506100b3610496565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f35780820151818401526020810190506100d8565b50505050905090810190601f1680156101205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013a57600080fd5b50610179600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610534565b604051808215151515815260200191505060405180910390f35b34801561019f57600080fd5b506101a8610626565b6040518082815260200191505060405180910390f35b3480156101ca57600080fd5b50610229600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061062c565b604051808215151515815260200191505060405180910390f35b34801561024f57600080fd5b5061025861089b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561029857808201518184015260208101905061027d565b50505050905090810190601f1680156102c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102df57600080fd5b50610314600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610939565b6040518082815260200191505060405180910390f35b34801561033657600080fd5b5061033f610951565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561037f578082015181840152602081019050610364565b50505050905090810190601f1680156103ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103c657600080fd5b50610405600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109ef565b604051808215151515815260200191505060405180910390f35b34801561042b57600080fd5b50610480600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b48565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561052c5780601f106105015761010080835404028352916020019161052c565b820191906000526020600020905b81548152906001019060200180831161050f57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60035481565b6000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561067c57600080fd5b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561070757600080fd5b81600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555081600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109315780601f1061090657610100808354040283529160200191610931565b820191906000526020600020905b81548152906001019060200180831161091457829003601f168201915b505050505081565b60046020528060005260406000206000915090505481565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109e75780601f106109bc576101008083540402835291602001916109e7565b820191906000526020600020905b8154815290600101906020018083116109ca57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610a3f57600080fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60056020528160005260406000206020528060005260406000206000915091505054815600a165627a7a72305820a2b5ebc646b206ef7b6b9e419e45c10c128d91783aac369377c773cc5d413d1e0029'
    
    
    //build tx
    //all values in here have to be in hex - hence the toHex.
    //in this case, there is no to: field cuz we are deploying smart contract to entire network. not one recipient
    //date field is the code for smart contract we are trying to deploy
    const txObject = {
        //nonce found by web3.eth.getTransactionCount
        nonce: web3.utils.toHex(txCount),
        gasLimit: web3.utils.toHex(1000000),
        gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),
        data: data
    }

    //sign tx
    //EDIT: new way to specify txObject on non mainnet chain
    const tx = new Tx(txObject, {'chain':'rinkeby'});
    tx.sign(privKey2)
    
    const serializedTx = tx.serialize()
    const raw = '0x' + serializedTx.toString('hex')
    
    //broadcast tx to the network
    web3.eth.sendSignedTransaction(raw, (err, txHash) => {
        console.log('err:', err, 'txHash:', txHash)
    })
})



//NOTE: Smart Contract put in RemixIDE as follows:
    //pragma solidity ^0.4.2;
    //
    //contract IzhanRupeeToken {
    //    string  public name = "Izhan Rupee Token";
    //    string  public symbol = "ZHNRP";
    //    string  public standard = "Izhan Token v1.0";
    //    uint256 public totalSupply;
    //
    //    event Transfer(
    //        address indexed _from,
    //        address indexed _to,
    //        uint256 _value
    //    );
    //
    //    event Approval(
    //        address indexed _owner,
    //        address indexed _spender,
    //        uint256 _value
    //    );
    //
    //    mapping(address => uint256) public balanceOf;
    //    mapping(address => mapping(address => uint256)) public allowance;
    //
    //    function IzhanRupeeToken () public {
    //        totalSupply = 10000000000000;
    //        balanceOf[msg.sender] = totalSupply;
    //    }
    //
    //    function transfer(address _to, uint256 _value) public returns (bool success) {
    //        require(balanceOf[msg.sender] >= _value);
    //
    //        balanceOf[msg.sender] -= _value;
    //        balanceOf[_to] += _value;
    //
    //        Transfer(msg.sender, _to, _value);
    //
    //        return true;
    //    }
    //
    //    function approve(address _spender, uint256 _value) public returns (bool success) {
    //        allowance[msg.sender][_spender] = _value;
    //
    //        Approval(msg.sender, _spender, _value);
    //
    //        return true;
    //    }
    //
    //    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
    //        require(_value <= balanceOf[_from]);
    //        require(_value <= allowance[_from][msg.sender]);
    //
    //        balanceOf[_from] -= _value;
    //        balanceOf[_to] += _value;
    //
    //        allowance[_from][msg.sender] -= _value;
    //
    //        Transfer(_from, _to, _value);
    //
    //        return true;
    //    }
    //}